Aplicacion subclass: #Aplicacion3	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!Aplicacion3 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hashtags:		<Object>	palabras:		<Object>	usuarios:		<Object>    Implementation Points!!Aplicacion3 methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 09:16'!inicializar	| tareaUsuario tarea2 tarea1 tarea3 |	tareaUsuario := UsuarioConCantSeguidores nuevo.	tarea1 := TotalDeTweet nuevo.	tarea2:= ReporteFechaCreacion nuevoConSiguiente: tarea1.	tarea3 := BifurcacionUsuario nuevoConSiguiente: tarea2 tareaUsuario: tareaUsuario.	primeraTarea := FiltroPorDispositivo nuevoConSiguiente: tarea3.	primeraTarea criterio: 'Web Client'! !Tarea subclass: #BifurcacionUsuario	instanceVariableNames: 'siguienteDeUsuario'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!BifurcacionUsuario commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!BifurcacionUsuario methodsFor: 'as yet unclassified' stamp: 'Ivana 6/15/2017 10:47'!inicializar: tarea conUsuario: tareaUsuario	super inicializar: tarea.	siguienteDeUsuario := tareaUsuario! !!BifurcacionUsuario methodsFor: 'as yet unclassified' stamp: 'Ivana 6/16/2017 13:00'!tarea: unTweet	siguienteDeUsuario procesar: unTweet user.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BifurcacionUsuario class	instanceVariableNames: ''!!BifurcacionUsuario class methodsFor: 'as yet unclassified' stamp: 'Ivana 6/16/2017 15:17'!nuevoConSiguiente: tarea tareaUsuario: tareaUsuario		^ self new inicializar: tarea conUsuario: tareaUsuario! !!BifurcacionUsuario class methodsFor: 'as yet unclassified' stamp: 'Ivana 6/16/2017 13:01'!solotareaUsuario: tareaUsuario	^ self new inicializar: Nulo new conUsuario: tareaUsuario! !FiltroConColeccion subclass: #FiltroPorDispositivo	instanceVariableNames: 'criterio'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!FiltroPorDispositivo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FiltroPorDispositivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/25/2017 23:40'!filtro: tweet^((tweet source findString: criterio)>0)! !!FiltroPorDispositivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:06'!inicializar: tarea	super inicializar: tarea.	criterio := 'Android'! !!FiltroPorDispositivo methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 10:44'!criterio: crit	criterio:= crit! !Contar subclass: #HashtagsPromedio	instanceVariableNames: 'hashtagsTotales'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!HashtagsPromedio commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hashtagsTotales:		<Object>    Implementation Points!!HashtagsPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 15:20'!inicializar: tarea	super inicializar: tarea.	hashtagsTotales := 0! !!HashtagsPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 13:49'!tarea: tweet	hashtagsTotales := hashtagsTotales + tweet hashtags size.	self		sumar;		agregarTexto: 'Promedio de hashtags: ';		agregarTexto: (hashtagsTotales / contador) asFloat;		imprimir ! !Contar subclass: #PalabrasPromedio	instanceVariableNames: 'palabrasTotales'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!PalabrasPromedio commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	palabrasTotales:		<Object>    Implementation Points!!PalabrasPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 14:14'!inicializar: tarea	super inicializar: tarea.	palabrasTotales :=0! !!PalabrasPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 14:16'!tarea: tweet	palabrasTotales := palabrasTotales + (tweet text splitOn: ' ') size.	self		sumar;		agregarTexto: 'Promedio de palabras: ';		agregarTexto: (palabrasTotales / contador) asFloat;		imprimir! !Reportar subclass: #ReporteFechaCreacion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!ReporteFechaCreacion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!ReporteFechaCreacion methodsFor: 'as yet unclassified' stamp: 'Ivana 6/16/2017 14:26'!tarea: unTweet	self imprimirTexto: 'Fecha de creacion:' variable: unTweet created_at .! !Tarea subclass: #TareaUsuario	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!TareaUsuario commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!Contar subclass: #TotalDeTweet	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!TotalDeTweet commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TotalDeTweet methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 14:27'!tarea: tweet	self		sumar;		agregarTexto: 'Cantidad de tweets: ';		agregarTexto: contador;		imprimir ! !TareaUsuario subclass: #UsuarioConCantSeguidores	instanceVariableNames: 'cantSeguidores coleccionUsuariosCumplen'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!UsuarioConCantSeguidores commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	total:		<Object>    Implementation Points!!UsuarioConCantSeguidores methodsFor: 'as yet unclassified' stamp: 'Ivana 6/16/2017 15:16'!agregarUsuario: unUsuario	"Agrega un usuario que a coleccionUsuariosCumplen"	coleccionUsuariosCumplen add: unUsuario! !!UsuarioConCantSeguidores methodsFor: 'as yet unclassified' stamp: 'Ivana 6/16/2017 14:22'!inicializar: tarea	super inicializar: tarea.	cantSeguidores := 100.	coleccionUsuariosCumplen := OrderedCollection new.! !!UsuarioConCantSeguidores methodsFor: 'as yet unclassified' stamp: 'Ivana 6/16/2017 15:17'!tarea: unUsuario	"Evalua que la cantidad de usuarios supere la pedida y a los que cumplen, los agrega a su coleccion"	unUsuario followers_count > cantSeguidores		ifTrue: [ self agregarUsuario: unUsuario ]! !!UsuarioConCantSeguidores methodsFor: 'as yet unclassified' stamp: 'Ivana 6/16/2017 15:16'!cantSeguidores: unNumero	"Setea la variable de instancia cantSeguidores"	cantSeguidores := unNumero! !Object subclass: #Aplicacion	instanceVariableNames: 'primeraTarea retriever'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!Aplicacion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	primeraTarea:		<Object>    Implementation Points!!Aplicacion methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 09:25'!comenzar: hashtag	retriever := StreamingRetriever login: TwitterLogin restoreExistingAccessToken.	retriever tweetsForHashtag: hashtag notify: self callback: #procesar:! !!Aplicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:39'!inicializarself subclassResponsibility ! !!Aplicacion methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 09:29'!procesar: unTweet	primeraTarea procesar: unTweet! !!Aplicacion methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 09:35'!parar	retriever stop.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Aplicacion class	instanceVariableNames: ''!!Aplicacion class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:41'!nuevo^self new inicializar ! !Object subclass: #TareaAbstracta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!TareaAbstracta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TareaAbstracta methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:28'!procesar: tweet	self subclassResponsibility! !TareaAbstracta subclass: #Nulo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!Nulo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Nulo methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 09:09'!procesar: tweet	"Este metodo esta vacio porque es el punto donde se corta el procesamiento de tweets."! !TareaAbstracta subclass: #Tarea	instanceVariableNames: 'siguiente retriever'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!Tarea commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	retriever:		<Object>	siguiente:		<Object>    Implementation Points!!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 15:02'!imprimirTexto: txt variable: var	Transcript		nextPutAll: txt asString ;		nextPutAll: var asString ;		cr;		endEntry! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:28'!procesar: tweet	self tarea: tweet.	siguiente procesar: tweet! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:29'!tarea: tweet	self subclassResponsibility .	! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 10:34'!inicializar: tareasiguiente := tarea .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tarea class	instanceVariableNames: ''!!Tarea class methodsFor: 'instance creation' stamp: 'Anonymous 6/7/2017 10:28'!nuevoConSiguiente: tarea	^ self new inicializar: tarea ! !!Tarea class methodsFor: 'instance creation' stamp: 'Ivana 6/22/2017 10:28'!nuevo	^ self nuevoConSiguiente: Nulo new! !Tarea subclass: #Filtro	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!Filtro commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	criterio:		<Object>    Implementation Points!!Filtro methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 09:11'!filtro: tweet	self subclassResponsibility .! !!Filtro methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:28'!procesar: tweet	(self filtro: tweet)		ifTrue: [ siguiente procesar: tweet ]! !Filtro subclass: #FiltroConColeccion	instanceVariableNames: 'coleccion'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!FiltroConColeccion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	coleccion:		<Object>    Implementation Points!!FiltroConColeccion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:10'!coleccion^coleccion ! !!FiltroConColeccion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:06'!inicializar: tarea	super inicializar: tarea.	coleccion := OrderedCollection new.! !!FiltroConColeccion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:28'!procesar: tweet	(self filtro: tweet)		ifTrue: [coleccion add: tweet. siguiente procesar: tweet ]! !!FiltroConColeccion methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 09:11'!filtro: unTweet	self subclassResponsibility .! !Tarea subclass: #GuardarEnArchivo	instanceVariableNames: 'nombre'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!GuardarEnArchivo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	nombre:		<Object>    Implementation Points!!GuardarEnArchivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:26'!nombre: unNombre	self subclassResponsibility ! !!GuardarEnArchivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:59'!inicializar: tarea	super inicializar: tarea.	self crear: 'Tweets'! !!GuardarEnArchivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:58'!crear: unNombre	self subclassResponsibility! !Tarea subclass: #Reportar	instanceVariableNames: 'textos'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!Reportar commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Reportar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 13:46'!inicializar: tarea	super inicializar: tarea.	textos := OrderedCollection new ! !!Reportar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 13:44'!imprimir	textos		do: [ :txt | 			Transcript				nextPutAll: txt;				endEntry ].			Transcript		cr;		endEntry.	self vaciar! !!Reportar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 13:44'!vaciar	textos reset! !!Reportar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 13:34'!agregarTexto: unTexto	textos add: unTexto asString ! !Aplicacion subclass: #Aplicacion2	instanceVariableNames: 'traductor filtroIdioma archivo tagCloud conCoordenadas'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 2'!!Aplicacion2 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	archivo:		<Object>	conCoordenadas:		<Object>	filtroIdioma:		<Object>	tagCloud:		<Object>	traductor:		<Object>    Implementation Points!!Aplicacion2 methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 09:16'!inicializar	archivo:= GuardarEnSTON nuevo .	tagCloud := TagCloud nuevoConSiguiente: archivo .	conCoordenadas := TotalConCoordenadas nuevoConSiguiente: tagCloud.	traductor := Traductor nuevoConSiguiente: conCoordenadas.	filtroIdioma := FiltroPorIdioma nuevoConSiguiente: traductor.	filtroIdioma criterio: 'en'.	primeraTarea := FiltroPorCantPalabra nuevoConSiguiente: filtroIdioma.	primeraTarea criterio: 15! !FiltroConColeccion subclass: #FiltroPorIdioma	instanceVariableNames: 'criterio'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 2'!!FiltroPorIdioma commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FiltroPorIdioma methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/25/2017 23:39'!filtro: tweet^(tweet language = criterio)! !!FiltroPorIdioma methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:42'!inicializar: tarea	super inicializar: tarea.	criterio := 'es'! !!FiltroPorIdioma methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 10:43'!criterio: crit	criterio:= crit! !GuardarEnArchivo subclass: #GuardarEnSTON	instanceVariableNames: 'coleccion'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 2'!!GuardarEnSTON commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!GuardarEnSTON methodsFor: 'private' stamp: 'Anonymous 6/13/2017 16:38'!nombre: unNombre	nombre := unNombre ,'.ston'! !!GuardarEnSTON methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 10:49'!coleccion	^ coleccion! !!GuardarEnSTON methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 10:47'!inicializar: unaTarea	super inicializar: unaTarea.	coleccion:= OrderedCollection new.! !!GuardarEnSTON methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 10:48'!tarea: tweet	coleccion add: tweet.	nombre asFileReference writeStreamDo: [ :str | STON put: coleccion onStreamPretty: str ]! !!GuardarEnSTON methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 10:48'!crear: unNombre	self nombre: unNombre.	nombre asFileReference		writeStreamDo: [ :str | STON put: coleccion onStreamPretty: str ]! !Contar subclass: #TagCloud	instanceVariableNames: 'hashtags'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 2'!!TagCloud commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hashtags:		<Object>    Implementation Points!!TagCloud methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 13:52'!inicializar: tarea	super inicializar: tarea.	hashtags:= Bag new! !!TagCloud methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 16:02'!imprimir	hashtags sortedCounts		do:			[ :hashtag | Transcript		nextPutAll: hashtag key asString;		nextPutAll: ' --> ';		nextPutAll: hashtag value asString;		cr;		endEntry ]! !!TagCloud methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 14:33'!tarea: tweet	self sumar.	hashtags addAll: tweet hashtags.	contador = 10		ifTrue: [ contador := 0.			self escribir ]! !!TagCloud methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 14:33'!escribir	hashtags sortedCounts		do: [ :hashtag | 			self 				agregarTexto: hashtag key;				agregarTexto: ' --> ';				agregarTexto: hashtag value;				imprimir ]! !Contar subclass: #TotalConCoordenadas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 2'!!TotalConCoordenadas commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TotalConCoordenadas methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 14:26'!tarea: tweet	tweet coordinates isNotNil		ifTrue: [ self				sumar;				agregarTexto: 'Cantidad con coordenadas: ';				agregarTexto: contador;				imprimir  ]! !Tarea subclass: #Traductor	instanceVariableNames: 'translator idiomaResultado'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 2'!!Traductor commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	idiomaResultado:		<Object>	translator:		<Object>    Implementation Points!!Traductor methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:41'!idiomaResultado: idiomaidiomaResultado :=idioma ! !!Traductor methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:40'!inicializar: tarea	super inicializar: tarea.	translator := SyncTranslator new.	idiomaResultado:= 'es'! !!Traductor methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:40'!tarea: tweet	| traduccion |	traduccion := translator translate: tweet text from: tweet language to: idiomaResultado .	tweet text: traduccion! !Reportar subclass: #Contar	instanceVariableNames: 'contador'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Compartido'!!Contar commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contador:		<Object>    Implementation Points!!Contar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:50'!inicializar: tarea	super inicializar: tarea.	contador :=0! !!Contar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:51'!sumarcontador := contador + 1! !FiltroConColeccion subclass: #FiltroPorCantPalabra	instanceVariableNames: 'criterio'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Compartido'!!FiltroPorCantPalabra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FiltroPorCantPalabra methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/25/2017 23:39'!filtro: tweet^(((tweet text splitOn: ' ') size) > criterio)! !!FiltroPorCantPalabra methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:43'!inicializar: tarea	super inicializar: tarea.	criterio := 5! !!FiltroPorCantPalabra methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 10:44'!criterio: crit	criterio:= crit! !Aplicacion subclass: #Aplicacion1	instanceVariableNames: 'guru autores archivo'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 1'!!Aplicacion1 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	filtroPalabras:		<Object>	guru:		<Object>    Implementation Points!!Aplicacion1 methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:34'!coleccionTweetsDelArchivo"Devuelve la coleccion de tweets guardada en el archivo FUEL"	^ archivo coleccion! !!Aplicacion1 methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 09:16'!inicializar	archivo := GuardarEnFUEL nuevo.	autores := NombreDelUsuario nuevoConSiguiente: archivo.	guru := FiltroPorSentimiento nuevoConSiguiente: autores.	primeraTarea := FiltroPorCantPalabra nuevoConSiguiente: guru.	primeraTarea criterio: 10! !Filtro subclass: #FiltroPorSentimiento	instanceVariableNames: 'sentimientos criterio'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 1'!!FiltroPorSentimiento commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	sentimientos:		<Object>    Implementation Points!!FiltroPorSentimiento methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 09:40'!filtro: tweet	^ (sentimientos qualifySentiment: tweet text) includesKey: criterio.		! !!FiltroPorSentimiento methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 16:34'!inicializar: tarea	super inicializar: tarea.	criterio := 'alegria'.	sentimientos := SentimentGuru new! !!FiltroPorSentimiento methodsFor: 'as yet unclassified' stamp: 'Ivana 6/22/2017 10:43'!criterio: crit	criterio:= crit! !GuardarEnArchivo subclass: #GuardarEnFUEL	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 1'!!GuardarEnFUEL commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!GuardarEnFUEL methodsFor: 'private' stamp: 'Anonymous 6/13/2017 16:38'!nombre: unNombre	nombre := unNombre,'.fuel'! !!GuardarEnFUEL methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:29'!coleccion	^ FLMaterializer materializeFromFileNamed: nombre ! !!GuardarEnFUEL methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:07'!tarea: tweet	| coleccion |	coleccion := FLMaterializer materializeFromFileNamed: nombre .	coleccion add: tweet.	FLSerializer serialize: coleccion toFileNamed: nombre ! !!GuardarEnFUEL methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:56'!crear: unNombre	self nombre: unNombre .	FLSerializer serialize: OrderedCollection new toFileNamed: nombre! !Reportar subclass: #NombreDelUsuario	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 1'!!NombreDelUsuario commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!NombreDelUsuario methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 16:54'!tarea: tweetself agregarTexto: 'Usuario: '; agregarTexto: tweet user name; imprimir! !