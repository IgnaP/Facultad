Aplicacion subclass: #Aplicacion3	instanceVariableNames: 'usuarios hashtags palabras filtroDispositivo filtroIdioma'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!Aplicacion3 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hashtags:		<Object>	palabras:		<Object>	usuarios:		<Object>    Implementation Points!!Aplicacion3 methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 15:22'!usuariosYsusTweets	^ usuarios diccionario ! !!Aplicacion3 methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 14:09'!inicializar	hashtags := HashtagsPromedio nuevoSinSiguiente.	palabras := PalabrasPromedio nuevoConSiguiente: hashtags.	filtroIdioma := FiltroPorIdioma nuevoConSiguiente: palabras.	filtroDispositivo := FiltroPorDispositivo nuevoConSiguiente: filtroIdioma.	usuarios := UsuariosConSusTweets nuevoConSiguiente: filtroDispositivo.	primeraTarea := TotalDeTweet nuevoConSiguiente: usuarios! !FiltroConColeccion subclass: #FiltroPorDispositivo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!FiltroPorDispositivo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FiltroPorDispositivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/25/2017 23:40'!filtro: tweet^((tweet source findString: criterio)>0)! !!FiltroPorDispositivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:06'!inicializar: tarea	super inicializar: tarea.	criterio := 'Android'! !Contar subclass: #HashtagsPromedio	instanceVariableNames: 'hashtagsTotales'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!HashtagsPromedio commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hashtagsTotales:		<Object>    Implementation Points!!HashtagsPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 13:49'!tarea: tweet	hashtagsTotales := hashtagsTotales + tweet hashtags size.	self		sumar;		agregarTexto: 'Promedio de hashtags: ';		agregarTexto: (hashtagsTotales / contador) asFloat;		imprimir ! !!HashtagsPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 15:20'!inicializar: tarea	super inicializar: tarea.	hashtagsTotales := 0! !Contar subclass: #PalabrasPromedio	instanceVariableNames: 'palabrasTotales'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!PalabrasPromedio commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	palabrasTotales:		<Object>    Implementation Points!!PalabrasPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 14:16'!tarea: tweet	palabrasTotales := palabrasTotales + (tweet text splitOn: ' ') size.	self		sumar;		agregarTexto: 'Promedio de palabras: ';		agregarTexto: (palabrasTotales / contador) asFloat;		imprimir! !!PalabrasPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 14:14'!inicializar: tarea	super inicializar: tarea.	palabrasTotales :=0! !Contar subclass: #TotalDeTweet	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!TotalDeTweet commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TotalDeTweet methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 14:27'!tarea: tweet	self		sumar;		agregarTexto: 'Cantidad de tweets: ';		agregarTexto: contador;		imprimir ! !Tarea subclass: #UsuariosConSusTweets	instanceVariableNames: 'diccionario'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 3'!!UsuariosConSusTweets commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	diccionario:		<Object>    Implementation Points!!UsuariosConSusTweets methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 15:13'!tarea: tweet	diccionario		at: tweet user		ifPresent: [ (diccionario at: tweet user) add: tweet ]		ifAbsent: [ 			|coleccion|			coleccion := OrderedCollection new .			coleccion add: tweet .			diccionario at: tweet user put: coleccion .		]! !!UsuariosConSusTweets methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 15:22'!diccionario^diccionario ! !!UsuariosConSusTweets methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 14:55'!inicializar: tarea	super inicializar: tarea.	diccionario := Dictionary new! !Reportar subclass: #Contar	instanceVariableNames: 'contador'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Compartido'!!Contar commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contador:		<Object>    Implementation Points!!Contar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:50'!inicializar: tarea	super inicializar: tarea.	contador :=0! !!Contar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:51'!sumarcontador := contador + 1! !FiltroConColeccion subclass: #FiltroPorIdioma	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Compartido'!!FiltroPorIdioma commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FiltroPorIdioma methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/25/2017 23:39'!filtro: tweet^(tweet language = criterio)! !!FiltroPorIdioma methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:42'!inicializar: tarea	super inicializar: tarea.	criterio := 'es'! !FiltroConColeccion subclass: #FiltroPorPalabra	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Compartido'!!FiltroPorPalabra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FiltroPorPalabra methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/25/2017 23:39'!filtro: tweet^(((tweet text splitOn: ' ') size) > criterio)! !!FiltroPorPalabra methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:43'!inicializar: tarea	super inicializar: tarea.	criterio := 5! !Object subclass: #Aplicacion	instanceVariableNames: 'primeraTarea'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!Aplicacion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	primeraTarea:		<Object>    Implementation Points!!Aplicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:38'!parar	primeraTarea parar ! !!Aplicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:39'!comenzar: hashtag	primeraTarea comenzarConHashtag: hashtag ! !!Aplicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:39'!inicializarself subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Aplicacion class	instanceVariableNames: ''!!Aplicacion class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:41'!nuevo^self new inicializar ! !Object subclass: #TareaAbstracta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!TareaAbstracta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TareaAbstracta methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:28'!procesar: tweet	self subclassResponsibility! !TareaAbstracta subclass: #Nulo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!Nulo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Nulo methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:28'!procesar: tweet! !TareaAbstracta subclass: #Tarea	instanceVariableNames: 'siguiente retriever'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!Tarea commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	retriever:		<Object>	siguiente:		<Object>    Implementation Points!!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:28'!procesar: tweet	self tarea: tweet.	siguiente procesar: tweet! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 10:34'!inicializar: tareasiguiente := tarea .! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:28'!comenzarConHashtag: hasht	retriever := StreamingRetriever login: TwitterLogin restoreExistingAccessToken.	retriever tweetsForHashtag: hasht notify: self callback: #procesar:.! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 12:15'!pararretriever stop.! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:29'!tarea: tweet	self subclassResponsibility .	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tarea class	instanceVariableNames: ''!!Tarea class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:17'!nuevoSinSiguiente	^ self new inicializar: Nulo new! !!Tarea class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 10:28'!nuevoConSiguiente: tarea	^ self new inicializar: tarea ! !Tarea subclass: #Filtro	instanceVariableNames: 'criterio'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!Filtro commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	criterio:		<Object>    Implementation Points!!Filtro methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:28'!procesar: tweet	(self filtro: tweet)		ifTrue: [ siguiente procesar: tweet ]! !!Filtro methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:46'!criterio: critcriterio := crit ! !!Filtro methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/12/2017 11:03'!filtro: tweet^false! !Filtro subclass: #FiltroConColeccion	instanceVariableNames: 'coleccion'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!FiltroConColeccion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	coleccion:		<Object>    Implementation Points!!FiltroConColeccion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:10'!coleccion^coleccion ! !!FiltroConColeccion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:28'!procesar: tweet	(self filtro: tweet)		ifTrue: [coleccion add: tweet. siguiente procesar: tweet ]! !!FiltroConColeccion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:06'!inicializar: tarea	super inicializar: tarea.	coleccion := OrderedCollection new.! !Tarea subclass: #GuardarEnArchivo	instanceVariableNames: 'nombre'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!GuardarEnArchivo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	nombre:		<Object>    Implementation Points!!GuardarEnArchivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:58'!crear: unNombre	self subclassResponsibility! !!GuardarEnArchivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:26'!nombre: unNombre	self subclassResponsibility ! !!GuardarEnArchivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:59'!inicializar: tarea	super inicializar: tarea.	self crear: 'Tweets'! !Tarea subclass: #Reportar	instanceVariableNames: 'textos'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Framework'!!Reportar commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Reportar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 13:44'!imprimir	textos		do: [ :txt | 			Transcript				nextPutAll: txt;				endEntry ].			Transcript		cr;		endEntry.	self vaciar! !!Reportar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 13:46'!inicializar: tarea	super inicializar: tarea.	textos := OrderedCollection new ! !!Reportar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 13:34'!agregarTexto: unTexto	textos add: unTexto asString ! !!Reportar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 13:44'!vaciar	textos reset! !Aplicacion subclass: #Aplicacion2	instanceVariableNames: 'traductor filtroIdioma archivo tagCloud conCoordenadas'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 2'!!Aplicacion2 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	archivo:		<Object>	conCoordenadas:		<Object>	filtroIdioma:		<Object>	tagCloud:		<Object>	traductor:		<Object>    Implementation Points!!Aplicacion2 methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:20'!inicializar	archivo:= GuardarEnSTON nuevoSinSiguiente .	tagCloud := TagCloud nuevoConSiguiente: archivo .	conCoordenadas := TotalConCoordenadas nuevoConSiguiente: tagCloud.	traductor := Traductor nuevoConSiguiente: conCoordenadas.	filtroIdioma := FiltroPorIdioma nuevoConSiguiente: traductor.	filtroIdioma criterio: 'en'.	primeraTarea := FiltroPorPalabra nuevoConSiguiente: filtroIdioma.	primeraTarea criterio: 15! !GuardarEnArchivo subclass: #GuardarEnSTON	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 2'!!GuardarEnSTON commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!GuardarEnSTON methodsFor: 'private' stamp: 'Anonymous 6/13/2017 16:38'!nombre: unNombre	nombre := unNombre ,'.ston'! !!GuardarEnSTON methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:30'!coleccion	^ nombre asFileReference readStreamDo: [ :stream | STON fromStream: stream ]! !!GuardarEnSTON methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:55'!crear: unNombre	self nombre: unNombre .	nombre asFileReference		writeStreamDo: [ :str | STON put: OrderedCollection new onStreamPretty: str ]! !!GuardarEnSTON methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:08'!tarea: tweet	| coleccion |	coleccion := nombre asFileReference		readStreamDo: [ :stream | STON fromStream: stream ].	coleccion add: tweet.	nombre asFileReference		writeStreamDo: [ :str | STON put: coleccion onStreamPretty: str ]! !Contar subclass: #TagCloud	instanceVariableNames: 'hashtags'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 2'!!TagCloud commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hashtags:		<Object>    Implementation Points!!TagCloud methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 14:33'!tarea: tweet	self sumar.	hashtags addAll: tweet hashtags.	contador = 10		ifTrue: [ contador := 0.			self escribir ]! !!TagCloud methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 14:33'!escribir	hashtags sortedCounts		do: [ :hashtag | 			self 				agregarTexto: hashtag key;				agregarTexto: ' --> ';				agregarTexto: hashtag value;				imprimir ]! !!TagCloud methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 13:52'!inicializar: tarea	super inicializar: tarea.	hashtags:= Bag new! !Contar subclass: #TotalConCoordenadas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 2'!!TotalConCoordenadas commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TotalConCoordenadas methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 14:26'!tarea: tweet	tweet coordinates isNotNil		ifTrue: [ self				sumar;				agregarTexto: 'Cantidad con coordenadas: ';				agregarTexto: contador;				imprimir  ]! !Tarea subclass: #Traductor	instanceVariableNames: 'translator idiomaResultado'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 2'!!Traductor commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	idiomaResultado:		<Object>	translator:		<Object>    Implementation Points!!Traductor methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:40'!tarea: tweet	| traduccion |	traduccion := translator translate: tweet text from: tweet language to: idiomaResultado .	tweet text: traduccion! !!Traductor methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:41'!idiomaResultado: idiomaidiomaResultado :=idioma ! !!Traductor methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 17:40'!inicializar: tarea	super inicializar: tarea.	translator := SyncTranslator new.	idiomaResultado:= 'es'! !Aplicacion subclass: #Aplicacion1	instanceVariableNames: 'guru autores archivo'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 1'!!Aplicacion1 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	filtroPalabras:		<Object>	guru:		<Object>    Implementation Points!!Aplicacion1 methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:34'!coleccionTweetsDelArchivo"Devuelve la coleccion de tweets guardada en el archivo FUEL"	^ archivo coleccion! !!Aplicacion1 methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/15/2017 14:56'!inicializar	archivo := GuardarEnFUEL nuevoSinSiguiente.	autores := NombreDelUsuario nuevoConSiguiente: archivo.	guru := FiltroPorSentimiento nuevoConSiguiente: autores.	primeraTarea := FiltroPorPalabra nuevoConSiguiente: guru.	primeraTarea criterio: 10! !Filtro subclass: #FiltroPorSentimiento	instanceVariableNames: 'sentimientos'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 1'!!FiltroPorSentimiento commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	sentimientos:		<Object>    Implementation Points!!FiltroPorSentimiento methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 16:50'!filtro: tweet	^ (sentimientos qualifySentiment: tweet text) at: criterio ifPresent: [ true ] ifAbsent: [ false ]! !!FiltroPorSentimiento methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 16:34'!inicializar: tarea	super inicializar: tarea.	criterio := 'alegria'.	sentimientos := SentimentGuru new! !GuardarEnArchivo subclass: #GuardarEnFUEL	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 1'!!GuardarEnFUEL commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!GuardarEnFUEL methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:29'!coleccion	^ FLMaterializer materializeFromFileNamed: nombre ! !!GuardarEnFUEL methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:56'!crear: unNombre	self nombre: unNombre .	FLSerializer serialize: OrderedCollection new toFileNamed: nombre! !!GuardarEnFUEL methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/13/2017 16:07'!tarea: tweet	| coleccion |	coleccion := FLMaterializer materializeFromFileNamed: nombre .	coleccion add: tweet.	FLSerializer serialize: coleccion toFileNamed: nombre ! !!GuardarEnFUEL methodsFor: 'private' stamp: 'Anonymous 6/13/2017 16:38'!nombre: unNombre	nombre := unNombre,'.fuel'! !Reportar subclass: #NombreDelUsuario	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3--Aplicacion 1'!!NombreDelUsuario commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!NombreDelUsuario methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/16/2017 16:54'!tarea: tweetself agregarTexto: 'Usuario: '; agregarTexto: tweet user name; imprimir! !