Object subclass: #Aplicacion	instanceVariableNames: 'primeraTarea'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Aplicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:38'!parar	primeraTarea parar ! !!Aplicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:39'!comenzar: hashtag	primeraTarea comenzarConHashtag: hashtag ! !!Aplicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:39'!inicializarself subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Aplicacion class	instanceVariableNames: ''!!Aplicacion class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:41'!nuevo^self new inicializar ! !Aplicacion subclass: #Aplicacion1	instanceVariableNames: 'guru autores archivo'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Aplicacion1 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	filtroPalabras:		<Object>	guru:		<Object>    Implementation Points!!Aplicacion1 methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:34'!coleccionTweetsDelArchivo"Devuelve la coleccion de tweets guardada en el archivo FUEL"	^ archivo coleccion! !!Aplicacion1 methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:40'!inicializar	archivo := GuardarEnFUEL nuevoSinSiguiente.	autores := NombreDelUsuario nuevoConSiguiente: archivo.	guru := Guru nuevoConSiguiente: autores.	primeraTarea := Palabra nuevoConSiguiente: guru.	primeraTarea criterio: 10! !Aplicacion subclass: #Aplicacion2	instanceVariableNames: 'traductor filtroIdioma archivo tagCloud conCoordenadas'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Aplicacion2 methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 18:01'!inicializar	archivo:= GuardarEnSTON nuevoSinSiguiente .	tagCloud := TagCloud nuevoConSiguiente: archivo .	conCoordenadas := TotalConCoordenadas nuevoConSiguiente: tagCloud.	traductor := Traductor nuevoConSiguiente: conCoordenadas.	filtroIdioma := Idioma nuevoConSiguiente: traductor.	filtroIdioma criterio: 'en'.	primeraTarea := Palabra nuevoConSiguiente: filtroIdioma.	primeraTarea criterio: 15! !Object subclass: #Etapa	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Etapa commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Etapa methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:28'!cadena: tweet	self subclassResponsibility! !Etapa subclass: #Null	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Null commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Null methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:27'!cadena: tweet! !Etapa subclass: #Tarea	instanceVariableNames: 'siguiente retriever'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Tarea commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	retriever:		<Object>	siguiente:		<Object>    Implementation Points!!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 15:02'!imprimirTexto: txt variable: var	Transcript		nextPutAll: txt asString ;		nextPutAll: var asString ;		cr;		endEntry! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 10:34'!inicializar: tareasiguiente := tarea .! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 13:26'!comenzarConHashtag: hasht	retriever := StreamingRetriever login: TwitterLogin restoreExistingAccessToken.	retriever tweetsForHashtag: hasht notify: self callback: #cadena:.! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 12:15'!pararretriever stop.! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:11'!cadena: tweet	self tarea: tweet.	siguiente cadena: tweet! !!Tarea methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:29'!tarea: tweet	self subclassResponsibility .	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tarea class	instanceVariableNames: ''!!Tarea class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 10:29'!nuevoSinSiguiente	^ self new inicializar: Null new! !!Tarea class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 10:28'!nuevoConSiguiente: tarea	^ self new inicializar: tarea ! !Tarea subclass: #Contar	instanceVariableNames: 'contador'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Contar commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contador:		<Object>    Implementation Points!!Contar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:50'!inicializar: tarea	super inicializar: tarea.	contador :=0! !!Contar methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:51'!sumarcontador := contador + 1! !Tarea subclass: #Filtro	instanceVariableNames: 'criterio'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Filtro commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	criterio:		<Object>    Implementation Points!!Filtro methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:46'!criterio: critcriterio := crit ! !!Filtro methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/12/2017 11:03'!filtro: tweet^false! !!Filtro methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:15'!cadena: tweet	(self filtro: tweet)		ifTrue: [ siguiente cadena: tweet ]! !Filtro subclass: #ConColeccion	instanceVariableNames: 'coleccion'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!ConColeccion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	coleccion:		<Object>    Implementation Points!!ConColeccion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:15'!cadena: tweet	(self filtro: tweet)		ifTrue: [coleccion add: tweet. siguiente cadena: tweet ]! !!ConColeccion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:10'!coleccion^coleccion ! !!ConColeccion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:06'!inicializar: tarea	super inicializar: tarea.	coleccion := OrderedCollection new.! !ConColeccion subclass: #Dispositivo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Dispositivo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Dispositivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/25/2017 23:40'!filtro: tweet^((tweet source findString: criterio)>0)! !!Dispositivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:06'!inicializar: tarea	super inicializar: tarea.	criterio := 'Android'! !Tarea subclass: #GuardarEnFUEL	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!GuardarEnFUEL methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:08'!tarea: tweet|coleccion|coleccion :=FLMaterializer materializeFromFileNamed: 'Tweets.fuel'.coleccion add: tweet .	FLSerializer serialize: coleccion toFileNamed: 'Tweets.fuel'! !!GuardarEnFUEL methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:14'!coleccion^FLMaterializer materializeFromFileNamed: 'Tweets.fuel'! !!GuardarEnFUEL methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 12:06'!inicializar: tarea|coleccion|	super inicializar: tarea.	coleccion := OrderedCollection new.	FLSerializer serialize: coleccion toFileNamed: 'Tweets.fuel'.! !Tarea subclass: #GuardarEnSTON	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!GuardarEnSTON methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 17:56'!tarea: tweet	| coleccion |	coleccion := 'Tweets.ston' asFileReference		readStreamDo: [ :stream | STON fromStream: stream ].		coleccion add: tweet .	'Tweets.ston' asFileReference		writeStreamDo: [ :str | STON put: coleccion onStreamPretty: str ]! !!GuardarEnSTON methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 18:00'!coleccion	^('Tweets.ston' asFileReference readStreamDo: [ :stream | STON fromStream: stream ])! !!GuardarEnSTON methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 17:53'!inicializar: tarea	| coleccion |	super inicializar: tarea.	coleccion := OrderedCollection new.	'Tweets.ston' asFileReference		writeStreamDo: [ :str | STON put: coleccion onStreamPretty: str ]! !Filtro subclass: #Guru	instanceVariableNames: 'sentimientos'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Guru methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 16:50'!filtro: tweet	^ (sentimientos qualifySentiment: tweet text) at: criterio ifPresent: [ true ] ifAbsent: [ false ]! !!Guru methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 16:34'!inicializar: tarea	super inicializar: tarea.	criterio := 'alegria'.	sentimientos := SentimentGuru new! !Contar subclass: #HashtagsPromedio	instanceVariableNames: 'hashtagsTotales'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!HashtagsPromedio commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hashtagsTotales:		<Object>    Implementation Points!!HashtagsPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:50'!tarea: tweet	hashtagsTotales := hashtagsTotales + tweet hashtags size.	self sumar;	imprimirTexto: 'Promedio de hashtags: ' variable: ((hashtagsTotales / contador) asFloat) .! !!HashtagsPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 15:20'!inicializar: tarea	super inicializar: tarea.	hashtagsTotales := 0! !ConColeccion subclass: #Idioma	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Idioma commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Idioma methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/25/2017 23:39'!filtro: tweet^(tweet language = criterio)! !!Idioma methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:42'!inicializar: tarea	super inicializar: tarea.	criterio := 'es'! !Tarea subclass: #NombreDelUsuario	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!NombreDelUsuario methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 11:58'!tarea: tweetself imprimirTexto: 'Usuario: ' variable: tweet user name! !ConColeccion subclass: #Palabra	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Palabra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Palabra methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/25/2017 23:39'!filtro: tweet^(((tweet text splitOn: ' ') size) > criterio)! !!Palabra methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 11:43'!inicializar: tarea	super inicializar: tarea.	criterio := 5! !Contar subclass: #PalabrasPromedio	instanceVariableNames: 'palabrasTotales'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!PalabrasPromedio commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	palabrasTotales:		<Object>    Implementation Points!!PalabrasPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:50'!tarea: tweet	palabrasTotales := palabrasTotales + (tweet text splitOn: ' ') size.	self		sumar;		imprimirTexto: 'Promedio de palabras: ' variable: (palabrasTotales / contador) asFloat! !!PalabrasPromedio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/7/2017 14:14'!inicializar: tarea	super inicializar: tarea.	palabrasTotales :=0! !Contar subclass: #TagCloud	instanceVariableNames: 'hashtags'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!TagCloud methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 15:59'!tarea: tweet	self sumar.	hashtags addAll: tweet hashtags.	contador = 10		ifTrue: [ contador := 0. self imprimir ]! !!TagCloud methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 16:02'!imprimir	hashtags sortedCounts		do:			[ :hashtag | Transcript		nextPutAll: hashtag key asString;		nextPutAll: ' --> ';		nextPutAll: hashtag value asString;		cr;		endEntry ]! !!TagCloud methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 13:52'!inicializar: tarea	super inicializar: tarea.	hashtags:= Bag new! !Contar subclass: #TotalConCoordenadas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!TotalConCoordenadas methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 17:02'!tarea: tweet	tweet coordinates isNotNil		ifTrue: [ self				sumar;				imprimirTexto: 'Cantidad con coordenadas: ' variable: contador ]! !Contar subclass: #TotalDeTweet	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!TotalDeTweet commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TotalDeTweet methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/8/2017 15:50'!tarea: tweet	self sumar;	imprimirTexto: 'Cantidad de tweets: ' variable: contador .! !Tarea subclass: #Traductor	instanceVariableNames: 'translator'	classVariableNames: ''	poolDictionaries: ''	category: '-TrabajoDePromocion3-'!!Traductor methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 13:48'!tarea: tweet	| traduccion |	traduccion := translator translate: tweet text from: 'en' to: 'es'.	tweet text: traduccion ! !!Traductor methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2017 13:35'!inicializar: tarea	super inicializar: tarea.	translator:= SyncTranslator new.! !